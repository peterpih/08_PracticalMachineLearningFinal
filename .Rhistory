lm(child~ones+parent-1, galton)
lm(child~parent,galton)
mean(galton$child)
lm(child~1,galton)
swirl()
lm(child~1,galton)
head)trees
head(trees)
fit <-lm(Volume~Girth+Height+Constant-1,trees)
trees2 <-eliminate("Girth2",trees)
trees2 <-eliminate("Girth",trees)
head(trees2)
fit2<-lm(Volume ~ Height+Constant,trees2)
fit2<-lm(Volume ~ Height+Constant-1,trees2)
lapply(list(fit,fit2),coef)
swirl()
fit <-lm(child~parent,galton)
sqrt(sum(fit$residuals^2))
sqrt(sum(fit$residuals^2))/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
devience(fit)/(n-2)
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <-mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes = sum(deviance(fit)^2)
sRes = deviance(fit)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a<- training[grep("^IL_*", training)]
names(a)
names(training)
grep("^IL_*", training)
?grep
grep("^IL_*", names(training))
a<- training[grep("^IL_*", names(training)])
a<- training[grep("^IL_*", names(training))]
a <- cbind(diagnosis=training$diagnosis, a)
names(a)
fit <- lm(diagnosis ~ a[,-1], a)
a[,-1]
preProc <- preProcess(a[,-1],method="lm")
preProc <- preProcess(a[,-1],method=c("center", "scale"))
trainPC <- predict(preProc, a[,-1])
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
modelFit <- train(a$diagnosis ~ .,method="glm",data=trainPC)
summary(modelFit)
preProc_2 <- preProcess(a[,-1],method="pca", pcaComp=10
trainPC_2 <- predict(preProc_2, a[,-1])
modelFit_2 <- train(a$diagnosis ~ .,method="glm",data=trainPC_2)
preProc_2 <- preProcess(a[,-1],method="pca", pcaComp=10)
trainPC_2 <- predict(preProc_2, a[,-1])
modelFit_2 <- train(a$diagnosis ~ .,method="glm",data=trainPC_2)
summary(modelFit_2)
preProc_2 <- preProcess(a[,-1],method="pca", pcaComp=7)
trainPC_2 <- predict(preProc_2, a[,-1])
modelFit_2 <- train(a$diagnosis ~ .,method="glm",data=trainPC_2)
summary(modelFit_2)
deviance(modelFit_2)
preProc_2 <- preProcess(a[,-1],method="pca", pcaComp=12)
trainPC_2 <- predict(preProc_2, a[,-1])
modelFit_2 <- train(a$diagnosis ~ .,method="glm",data=trainPC_2)
summary(modelFit_2)
fit <- lm(diagnosis ~ a[,-1], a)
fit_2 <- glm(diagnosis ~ a[,-1], a)
fit <- lm(a$diagnosis ~ a[,-1], a)
class(a)
mtcars
lm(mtcars$mpg ~ mtcars$wt)
library(caret)
t <-train(wt, mpg, data=mtcars, method="glm")
t <-train(wt, mpg, data=mtcars, method="glm")
t<-lm(mtcars$mpg ~ mtcars$wt)
predict(t)
x<-rnorm(10)
y<-rnorm(10)
lm(y~x)
x<-x+5
lm(y~x)
lm$x-5
lm(y~x) * 5
lm(y~x)[1] * 5
fit<-lm(y~x)
fit$x * 5
fit$x
fit
str(fit)
fit$x.coef
fit$x.coef[1]
fit.coefficients.x
fit$coefficients.x
fit$coefficients[x]
fit$coefficients[1
]
fit$coefficients[2]
fit$coeff[2]
fit$coeff["x"]
fit$coeff.x
fit$coeff["x"] * 5
fit$coeff["y"] * 5
fit$coeff["y"]
fit$coeff[1]
fit$coeff["intercept"]
str(fit)
fit$coeff["(intercept)"]
fit$coeff[1]
fit$coeff[2]
fit$coeff[2] * 5 + fit$coeff[1]
fit <-lm(mtcars$mpg ~ mtcars$wt)
predict(fit)
train(mpg ~ wt, data=mtcars, method="lm")
t<-train(mpg ~ wt, data=mtcars, method="lm")
confusionMatrix(train)
confusionMatrix(mpg,train)
confusionMatrix(mtcars$mpg,train)
class(mtcars$x)
class(mtcars$wt)
confusionMatrix(mtcars$wt,train)
class(mtcars)
rm(list=ls())
train(mpg ~ wt, data=mtcars)
warnings()
train(mpg ~ wt, data=mtcars, method="glm")
train<-train(mpg ~ wt, data=mtcars, method="glm")
predict(train)
predict<-predict(train)
confusionMatrix(mt$mpg, predict)
confusionMatrix(mtcars$mpg, predict)
model <- train(mpg ~ wt, data=mtcars, method="glm")
predict(model)
model
model$coef
model$wt
model$coeff[1]
model$coefficientnames
model$coeffnames
str(model)
summary(model)
mtscars
mtcars
mtcars[,c(wt,mpg)]
x<-as.matrix(mtcars$mpg, mtcars$wt)
x
mtcars$wt
mtcars$mpg
x<-as.matrix(c(mtcars$mpg, mtcars$wt))
x
x<-rnorm(20)
y<-rnorm(20)
fit<-lm(y~x)
sum(resid(fit))
y1 <- rep(1,20)
y1
fit2<-lm(y1~x)
x1 <- y1
rm(y1)
fit2<-lm(y~x1)
sum(resid(fit2))
fit2
pca_train_obj <- preProcess(y ~ x, method=lm')
)
pca_train_obj <- preProcess(y ~ x, method='lm')
fit <- lm(y~x)
class(fit)
fit2 <- glm(y~x)
all.equal(fit, fit2)
class(fit)
class(fit2)
summary(fit2)
summary(fit)
train(y~x, method="lm")
train(y~x, data=data, method="lm")
data <- x
data<-cbind(data, y)
head data
head(data)
names(data)<="x"
names(data)<-"x"
head(data)
x
train(data ~., data=data, method="glm")
fit3<-train(data ~., data=data, method="glm")
summary(fit3)
summary(fit)
q<-x
head q
head(q)
x
q<-cbind(x=q, y)
head q
head(q)
train(y~x, data=q,method="lm")
fit3 <-train(y~x, data=q,method="lm")
summary(fit3)
dat
fit
fit4 <-train(y~x, data=q,method="glm")
summary(fit4)
fit
summary(fit)
fit4 <-train(y~x, data=q,method="glm")
predict(fit)
y
fit4
summary(fit4)
summary(fit)
summary(fit3)
set.seed(123)
x<-rnorm(20)
y<-rnorm(20)
fit<-lm(y~x)
fit
summary(fit)
predict(fit)
q<-cbind(x=x)
names(q)
q
q<-cbind(q, w=x)
q
q<-cbind(q,y=y)
z<-rnorm(20)
train(y~.,data=q)
load(caret)
install.packages("caret")
train(y~.,data=q)
?train
??train
library(caret)
train(y~.,data=q)
train(y~.,data=q, method="glm")
warnings()
fit1<-train(y~.,data=q, method="glm")
summary(fit2)
fit2<-train(y~.,data=q, method="glm")
summary(fit2)
summary(fit)
q<-cbind(q,z=z)
fit3<-train(y~., data=q,method="glm")
summary(fit3)
fit4<-train(y~q[,-z], data=q,method="glm")
q
fit4<-train(y~q[,-4], data=q,method="glm")
summary(fit4)
fit(2)
summary(fit2)
q
fit4<-train(y~q[,c(-3,-4)], data=q,method="glm")
summary(fit4)
fit4<-train(y~q[,c("y","z")], data=q,method="glm")
summary(fit4)
q[,"x"]
q$x
q[,1]
q[,'x']
q.x
fit5<-train(q[,3]~q[,c(-3,-4)], method="glm")
fit5<-train(x,y,method="glm")
fit5<-train(x,y,method="lm")
train(x=x, y=y, method="lm")
train(y~x, method="lm")
train(y~., data=q, method="glm")
fit5<-train(y~., data=q, method="glm")
summary(fit5)
coef(fit5)
coeff(fit5)
pred(fit5)
predict(fit5)
data(iris);
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
class(modFit)
iris.rf <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
class(iris.rf)
importance(iris.rf)
iris2.rf <- randomForest(x=Species, y=iris[,-Species], ntree=50, norm.votes=FALSE)
names(iris)
iris2.rf <- randomForest(x=Species, y=iris[,-5], ntree=50, norm.votes=FALSE)
iris2.rf <- randomForest(x=iris$Species, y=iris[,-5], ntree=50, norm.votes=FALSE)
iris2.rf <- randomForest(x=iris[,-5], y=iris[,5], ntree=50, norm.votes=FALSE)
all.equal(iris.rf, iris2.rf)
iris.rf
iris2.rf
set.seed(123)
iris2.rf <- randomForest(x=iris[,-5], y=iris[,5], ntree=50, norm.votes=FALSE)
set.seed(123)
iris.rf <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
all.equal(iris.rf, iris2.rf)
iris.rf
iris2.rf
importance(iris.rf)
importance(iris2.rf)
str(iris)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
table(modFit)
getTree(modFit$finalModel,k=2)
pred <- predict(modFit,testing)
table(pred,testing$Species)
summary(modFit)
modFit$importance
summary(modFit)$importance
summary(modFit$importance)
str(modFit)
modFit$method
modFit$importance
modFit$importance[1]
modFit$importance[2]
modFit$finalModel
setwd("C:/R/PracticalMachineLearning/")
#
# read in the data
trainFile <- "pml-training.csv"
testFile <- "pml-testing.csv"
train <- read.csv(trainFile, stringsAsFactors=FALSE, na.strings="NA")   # explicitly set NAs
realtest <- read.csv(testFile, stringsAsFactors=FALSE, na.strings="NA")     # explicitly set NAs
# see what data is there
train_names <- names(train)
realtest_names <- names(realtest)
# what is the difference between the two data sets?
length(train_names)
length(realtest_names)
sum(train_names %in% realtest_names)
# the difference between the variables in the two data sets is the last variable "classe" in train
# and "problem_id" in test
exclude_names <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window",
"num_window", "problem_id")
# What data is there for the test data?
use_name <- as.character()
for (n in realtest_names){
if (sum(!is.na(realtest[,n])) > 0){
if (! n %in% exclude_names){
use_name <- c(use_name, n)
}
}
}
# add back the prediction
use_name <- c("classe", use_name)
# get the relevant columns
newtrain <- train[, use_name]
# split into training and test data sets
set.seed(123)
inTrain <- createDataPartition(y=newtrain$classe, p=0.7, list=FALSE)
newtrain_train <- newtrain[inTrain, ]
newtrain_test <- newtrain[-inTrain, ]
dim(newtrain_train)
q_train <- newtrain_train[1:10,]
dim(q_train)
q_train_set <- q_train
rm(q_train)
q_train <- train(classe ~ ., data=q_train_set[,-1])
names(q_train_set)
unique(q_train_set$classe)
class(q_train_set$classe)
q_train_set$classe <- as.factor(q_train_set$classe)
class(q_train_set$classe)
q_train <- train(classe ~ ., data=q_train_set[,-1])
q_train <- train(classe ~ ., data=q_train_set[,-1], method="rf", proxy=TRUE)
iris
colClasses(q_train_set)
??colClasses
q_train <- train(classe ~ ., data=q_train_set[,-1], method="rf", proxy=TRUE)
q_train <- train(classe~., data=q_train_set[,-1], method="rf", proxy=TRUE)
q_train <- train(classe ~ ., data=q_train_set[,-1], method="rf", proxy=TRUE)
class(qq_train_set)
class(q_train_set)
class(iris)
class(iris$Species)
class(q_train_set$classe)
q_train <- train(classe ~ ., data=q_train_set, method="rf", proxy=TRUE)
q_train <- train(classe ~ ., data=as.data.frame(q_train_set), method="rf", proxy=TRUE)
names(q_train_set)
q_train_test <- q_train_set[, c("classe","roll_belt")]
class(q_train_test)
head(q_train_set)
q_train_test <- cbind(q_train_set$classe, q_train_set$roll_belt)
head(q_train_test)
q_train_test <- cbind(classe=q_train_set$classe, roll_belt=q_train_set$roll_belt)
head(q_train_test)
q_train <- train(classe ~ ., data=as.data.frame(q_train_test), method="rf", proxy=TRUE)
warnings()
q_train <- train(classe ~ ., data=q_train_test, method="rf", proxy=TRUE)
warnings()
q_train
str(iris)
str(newtrain_train)
q_train_test <- q_train_test[,1:4]
q_train_test[,1:4]
q_train_test
newtrain_train
q_train <- newtrain_train[,1:4]
q_train
head(q_train, 5)
train(classe~.,data=q_train,method="rf")
unique(a_train$yaw_belt)
unique(q_train$yaw_belt)
head(q_train, 5)
train(classe~.,data=q_train,method="rf")
train(classe~.,data=q_train,method="rf", metric="Accuracy")
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE, metric="Accuracy")
str(modFit)
modFit <- train(Species~ .,data=training,method="rpart")
modFit
train(classe~.,data=q_train,method="rpart", metric="Accuracy")
train(q_train$classe~.,data=q_train,method="rpart", metric="Accuracy")
train(q_train$classe~.,data=q_train,method="rpart")
modFit <- train(q_train$classe ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), data=q_train)
modFit <- train(q_train$classe ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), data=q_train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
install.packages("vowel")
install.packages("rpart")
install.packages("rpart")
install.packages("AppliedPredictiveModeling")
install.packages("pgmm")
install.packages("caret")
install.packages("caret")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train
head(vowel.train)
t <- train(y~.,data=vowel.train)
t
t.rf <- train(y~.,data=vowel.train, method="rf")
importance(t.rf)
summary(t.rf)
varImp(t.rf)
varImp(t.rf, scale=F)
varImp(t, scale=F)
?varImp
varImpPlot(t.rf)
class(t.rf)
varImp(t.rf)
varImp.train(t.rf)
str(varImp)
str(t.rf)
t.rf$finalModel
varImp(t.rf, useModel=T, nonpara=T,scale=T)
t.rf <- train(y~.,data=vowel.train, method="rf", importance=TRUE)
varImp(t.rf)
set.seed(33833)
t.rf <- train(y~.,data=vowel.train, method="rf", importance=TRUE)
varImp(t.rf)
varImp(t.rf,useModel="rf")
?train
varImp(t)
sessinInfo()
sessionInfo()
install.packages("AppliedPredictiveModeling")
sessionInfo()
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
installed.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
unique(segmentationOriginal$Case)
t<- segmentationOriginal$case == "Test"
sum(t)
t<- segmentationOriginal$Case == "Test"
sum(t)
length(t)
train <- segmentationOriginal[t,]
dim(train)
test <- segmentationOriginal[-t,]
dim(test)
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
dim(test)
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
dim(train)
set.seed(125)
mod <- train(Cell~.,data=train,method="rpart")
head(train)
mod <- train(Class~.,data=train,method="rpart")
fancyRpartPlot(mod)
library(rpart)
fancyRpartPlot(mod)
library(rattle)
library(ggplot2)
install.packages("rattle")
fancyRpartPlot(mod)
library(rattle)
fancyRpartPlot(mod)
library(rattle)
library(RGtk2)
fancyRpartPlot(mod)
library(rpart)
fancyRpartPlot(mod)
